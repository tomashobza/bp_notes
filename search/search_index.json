{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Roadmap","text":"<ul> <li> Install ArduPilot, Gazebo, ROS2 on the VM</li> <li> Run ArduPilot SITL</li> <li> Run STIL + Gazebo</li> <li> Read camera feed in Gazebo</li> <li> Install DroneKit</li> <li> Run DroneKit + SITL, control drone via python</li> <li> Run DroneKit + SITL + Gazebo, read camera feed in python</li> </ul>","tags":["bp"]},{"location":"#dependency-installation","title":"Dependency installation","text":"<p>This guide is appliable for a fresh install of Ubuntu 22.04 arm64. Gotten from: https://github.com/ArduPilot/ardupilot_gz?tab=readme-ov-file</p> <ul> <li>AdruPilot installation</li> <li>ROS2 Humble installation</li> <li>Gazebo Harmonic installation</li> <li>This is weird and didn't really work<ul> <li>[!] Setup ROS2 environment and micro-ROS</li> <li>[!] ardupilot_gz installation</li> </ul> </li> </ul>","tags":["bp"]},{"location":"#steps","title":"Steps","text":"<ul> <li>Using SITL with gazebo</li> <li>Run Gazebo + ArduPilot STIL with a camera feed</li> <li>Run DroneKit to control ArduPilot STIL</li> <li>Read drone camera feed in python</li> </ul>","tags":["bp"]},{"location":"#experiments","title":"Experiments","text":"","tags":["bp"]},{"location":"#research","title":"Research","text":"<p>SCHONBERGER, Johannes L.; FRAHM, Jan-Michael. Structure-from-motion revisited. In:\u00a0Proceedings of the IEEE conference on computer vision and pattern recognition. 2016. p. 4104-4113. https://www.cv-foundation.org/openaccess/content_cvpr_2016/papers/Schonberger_Structure-From-Motion_Revisited_CVPR_2016_paper.pdf</p> <p>SFM Showcase https://www.youtube.com/watch?v=i7ierVkXYa8 https://cloud.sdsc.edu/v1/AUTH_opentopography/www/shortcourses/18SGTF/2_nissen-GSA-sept-2016-SfM-lecture1-Intro-Motivations-FINAL.pdf</p> <p>SIFT (Scale Invariant Feature Transform) - Robustn\u00ed algoritmus pro extrakci rys\u016f, kter\u00fd umo\u017e\u0148uje nal\u00e9zt shodn\u00e9 body i v obrazech s odli\u0161n\u00fdm m\u011b\u0159\u00edtkem, \u00fahlem pohledu nebo osv\u011btlen\u00edm. https://www.youtube.com/watch?v=ram-jbLJjFg https://weitz.de/sift/</p> <p>Structure-From-Motion https://youtu.be/JlOzyyhk1v0?si=kY-hb6UncmXVEBmB https://link.springer.com/content/pdf/10.1007/BFb0014857.pdf - orthografick\u00e9 structure from motion TOMASI, Carlo; KANADE, Takeo. Shape and motion from image streams: a factorization method.\u00a0Proceedings of the National Academy of Sciences, 1993, 90.21: 9795-9802. https://www.pnas.org/doi/epdf/10.1073/pnas.90.21.9795</p>","tags":["bp"]},{"location":"#drone-following","title":"Drone following","text":"<p>BARTAK, Roman; VYKOVSK\u00dd, Adam. Any object tracking and following by a flying drone. In:\u00a02015 Fourteenth Mexican International Conference on Artificial Intelligence (MICAI). IEEE, 2015. p. 35-41. https://ieeexplore.ieee.org/abstract/document/7429411</p> <p>CHEN, Peng, et al. Real-time object tracking on a drone with multi-inertial sensing data.\u00a0IEEE Transactions on Intelligent Transportation Systems, 2017, 19.1: 131-139. https://ieeexplore.ieee.org/abstract/document/8054712?casa_token=wrAGgarM5eEAAAAA:Mb196vV6l43fToiv5K9Cp7rdePAXtO2qa3-GSRadu_rDmKBCmJpxIeF3Scx3PLOP2VI9TBqnOgg</p>","tags":["bp"]},{"location":"Setting%20up%20ArduPilot%20with%20ROS%202%20and%20Gazebo%20-%20Tutorial/","title":"Setting up ArduPilot with ROS 2 and Gazebo   Tutorial","text":"<p>This tutorial guides you through setting up a development environment for ArduPilot with ROS 2 Humble and Gazebo Harmonic on Ubuntu 22.04.</p>"},{"location":"Setting%20up%20ArduPilot%20with%20ROS%202%20and%20Gazebo%20-%20Tutorial/#prerequisites","title":"Prerequisites","text":"<pre><code># Install ROS 2 Humble (if not already installed)\nsudo apt install ros-humble-desktop-full\n\n# Install additional dependencies\nsudo apt install python3-vcstool python3-pip python3-pygame python3-matplotlib python3-lxml python3-yaml python-is-python3 libpython3-dev libtool cmake default-jre\n</code></pre>"},{"location":"Setting%20up%20ArduPilot%20with%20ROS%202%20and%20Gazebo%20-%20Tutorial/#setting-up-the-workspace","title":"Setting up the Workspace","text":"<ol> <li> <p>Create a new workspace: <pre><code>cd ~\nrm -rf ardu_ws  # Remove if exists\nmkdir -p ardu_ws/src\ncd ardu_ws\n</code></pre></p> </li> <li> <p>Clone required repositories: <pre><code>vcs import --input https://raw.githubusercontent.com/ArduPilot/ardupilot_gz/main/ros2_gz.repos --recursive src\n</code></pre></p> </li> <li> <p>Set up Gazebo environment: <pre><code># Add to ~/.bashrc\necho \"export GZ_VERSION=harmonic\" &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n\n# Install Gazebo Harmonic and dependencies\nsudo apt update\nsudo apt install gz-harmonic\nsudo apt install libgz-transport13-dev libgz-math7-dev libgz-msgs9-dev python3-gz-math7\n</code></pre></p> </li> </ol>"},{"location":"Setting%20up%20ArduPilot%20with%20ROS%202%20and%20Gazebo%20-%20Tutorial/#installing-microxrceddsgen","title":"Installing MicroXRCEDDSGen","text":"<p>This is a crucial step and must be done correctly:</p> <pre><code>cd ~/ardu_ws\nrm -rf Micro-XRCE-DDS-Gen  # Remove if exists\ngit clone https://github.com/ardupilot/Micro-XRCE-DDS-Gen.git\ncd Micro-XRCE-DDS-Gen\ngit submodule update --init --recursive\n./gradlew assemble\necho \"export PATH=\\$PATH:$PWD/scripts\" &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n\n# Verify installation\nmicroxrceddsgen -version\n</code></pre>"},{"location":"Setting%20up%20ArduPilot%20with%20ROS%202%20and%20Gazebo%20-%20Tutorial/#building-the-workspace","title":"Building the Workspace","text":"<ol> <li> <p>Install ROS dependencies: <pre><code>cd ~/ardu_ws\nsource /opt/ros/humble/setup.bash\nrosdep update\nrosdep install --from-paths src --ignore-src -r -y\n</code></pre></p> </li> <li> <p>Build the workspace (this will take some time): <pre><code>colcon build --packages-up-to ardupilot_gz_bringup --symlink-install --allow-overriding ardupilot_msgs ardupilot_sitl ros_gz_bridge ros_gz_interfaces ros_gz_sim sdformat_urdf --cmake-clean-cache\nsource install/setup.bash\n</code></pre></p> </li> </ol>"},{"location":"Setting%20up%20ArduPilot%20with%20ROS%202%20and%20Gazebo%20-%20Tutorial/#testing-the-setup","title":"Testing the Setup","text":"<ol> <li>Launch the simulation: <pre><code>cd ~/ardu_ws\nsource install/setup.bash\nros2 launch ardupilot_gz_bringup iris_runway.launch.py\n</code></pre></li> </ol> <p>This should open Gazebo with a simulated Iris drone on a runway.</p> <ol> <li>In a new terminal, check available ROS topics: <pre><code>source ~/ardu_ws/install/setup.bash\nros2 topic list\n</code></pre></li> </ol>"},{"location":"Setting%20up%20ArduPilot%20with%20ROS%202%20and%20Gazebo%20-%20Tutorial/#common-issues-and-solutions","title":"Common Issues and Solutions","text":"<ol> <li> <p>If you get build errors related to ardupilot_msgs or symbolic links: <pre><code>cd ~/ardu_ws\nrm -rf build/ install/ log/\n</code></pre> Then try building again.</p> </li> <li> <p>If microxrceddsgen version issues occur, ensure you're using the ArduPilot fork and have initialized submodules.</p> </li> <li> <p>If Gazebo packages are not found, make sure GZ_VERSION is set correctly: <pre><code>echo $GZ_VERSION  # Should output 'harmonic'\n</code></pre></p> </li> </ol>"},{"location":"Setting%20up%20ArduPilot%20with%20ROS%202%20and%20Gazebo%20-%20Tutorial/#directory-structure","title":"Directory Structure","text":"<p>After setup, your workspace should look like this: <pre><code>~/ardu_ws/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 ardupilot/\n\u2502   \u251c\u2500\u2500 ardupilot_gazebo/\n\u2502   \u251c\u2500\u2500 ardupilot_gz/\n\u2502   \u251c\u2500\u2500 ardupilot_sitl_models/\n\u2502   \u251c\u2500\u2500 micro_ros_agent/\n\u2502   \u251c\u2500\u2500 ros_gz/\n\u2502   \u2514\u2500\u2500 sdformat_urdf/\n\u251c\u2500\u2500 build/\n\u251c\u2500\u2500 install/\n\u2514\u2500\u2500 log/\n</code></pre></p>"},{"location":"Setting%20up%20ArduPilot%20with%20ROS%202%20and%20Gazebo%20-%20Tutorial/#next-steps","title":"Next Steps","text":"<ol> <li>Create custom Gazebo worlds</li> <li>Implement autonomous flight controllers</li> <li>Add sensors and custom plugins</li> <li>Integrate computer vision capabilities</li> </ol>"},{"location":"Setting%20up%20ArduPilot%20with%20ROS%202%20and%20Gazebo%20-%20Tutorial/#references","title":"References","text":"<ul> <li>ArduPilot Documentation</li> <li>ROS 2 Documentation</li> <li>Gazebo Documentation</li> </ul>"},{"location":"dev/AdruPilot%20installation/","title":"AdruPilot installation","text":"<p>https://ardupilot.org/dev/docs/building-setup-linux.html <pre><code># Install git\nsudo\u00a0apt-get\u00a0update    \nsudo\u00a0apt-get\u00a0install\u00a0git\nsudo\u00a0apt-get\u00a0install\u00a0gitk\u00a0git-gui\n\n# Clone the repository\ngit clone --recurse-submodules https://github.com/ArduPilot/ardupilot.git\ncd ardupilot\n\n# Install the prerequirements\nTools/environment_install/install-prereqs-ubuntu.sh -y\n\n# Reload the path (log-out-it to make it permanent)\n. ~/.profile\n</code></pre></p>","tags":["bp"]},{"location":"dev/DroneKit%20installation/","title":"DroneKit installation","text":"<p>As DroneKit is not in development anymore, there were troubles with latest Python versions. Hence using <code>pyenv</code> and using python <code>3.9.20</code> is a good way to prevent troubles. <pre><code># Install dronekit\npip install dronekit\npip install dronekit-sitl # Doesn't work on arm64 architecture :D\n</code></pre></p> <p>Runing the SITL and connecting to it from the Python code:  Using the python code to fly, spin around in a cricle, and land the drone. </p>","tags":["bp"]},{"location":"dev/Experiments/","title":"Experiments","text":"<p>Je z\u0159ejm\u00e9, \u017ee jeden\u00e1ct sn\u00edmk\u016f je p\u0159\u00edli\u0161 mal\u00fd po\u010det pro \u00fasp\u011b\u0161nou rekonstrukci. Algoritmus ov\u0161em \u00fasp\u011b\u0161n\u011b detekoval charakteristick\u00e9 body. Z experimentu tak\u00e9 plyne nutnost p\u0159ekr\u00fdvaj\u00edc\u00edch se sn\u00edmk\u016f - zachycen\u00ed kontinu\u00e1ln\u00edho videa bude proto nejlep\u0161\u00edm mo\u017en\u00fdm \u0159e\u0161en\u00edm. </p> <p>Pro optimalizaci lze n\u00e1sobit rychlost po\u0159izov\u00e1n\u00ed sn\u00edmk\u016f rychlost\u00ed pohybu drona. P\u0159i ni\u017e\u0161\u00edch rychlostech se obsah sn\u00edman\u00e9 sc\u00e9ny m\u011bn\u00ed pomaleji, proto nen\u00ed t\u0159eba rapidn\u00edho sn\u00edm\u00e1n\u00ed.</p> <p>N\u00e1sledn\u011b jsem vyzkou\u0161el t\u0159i hlavn\u00ed algoritmy pro extrakci charakteristick\u00fdch bod\u016f a jejich n\u00e1sledn\u00e9 p\u00e1rov\u00e1n\u00ed - SIFT, FAST a ORB. Nejprve jsem vyzkou\u0161el extrakci samotnou.</p> <p></p> <p>A n\u00e1sledn\u011b jsem vyzkou\u0161el extrakci a p\u00e1rov\u00e1n\u00ed charakteristick\u00fdch bod\u016f. Obr\u00e1zky jsou</p> <p>  Zde vizualizov\u00e1no znovu se sn\u00edmky z videa z dronu:  </p>"},{"location":"dev/Following%20the%20official%20ROS2%20%2B%20ArduPilot%20%2B%20Gazebo%20tutorial/","title":"Following the official ROS2 + ArduPilot + Gazebo tutorial","text":"<p>https://ardupilot.org/dev/docs/ros2-gazebo.html</p>","tags":["bp"]},{"location":"dev/Following%20the%20official%20ROS2%20%2B%20ArduPilot%20%2B%20Gazebo%20tutorial/#install-ros2-ardupilot","title":"Install ROS2 ArduPilot","text":"<ol> <li>Clone required repos <pre><code>mkdir -p ~/ardu_ws/src\ncd ~/ardu_ws\nvcs import --recursive --input  https://raw.githubusercontent.com/ArduPilot/ardupilot/master/Tools/ros2/ros2.repos src\n</code></pre></li> <li>Update all dependencies <pre><code>cd ~/ardu_ws\nsudo apt update\nrosdep update\nsource /opt/ros/humble/setup.bash\nrosdep install --from-paths src --ignore-src\n</code></pre></li> </ol>","tags":["bp"]},{"location":"dev/Following%20the%20official%20ROS2%20%2B%20ArduPilot%20%2B%20Gazebo%20tutorial/#install-ros2-ardupilot-gazebo","title":"Install ROS2 + ArduPilot + Gazebo","text":"<ol> <li>Clone the required repos <pre><code>cd ~/ardu_ws\nvcs import --input https://raw.githubusercontent.com/ArduPilot/ardupilot_gz/main/ros2_gz.repos --recursive src\n</code></pre></li> </ol>","tags":["bp"]},{"location":"dev/Gazebo%20Harmonic%20installation/","title":"Gazebo Harmonic installation","text":"<p>https://gazebosim.org/docs/harmonic/install_ubuntu/ <pre><code># Install dependencies\nsudo apt-get update\nsudo apt-get install curl lsb-release gnupg\n\n# Install Gazebo Harmonic\nsudo curl https://packages.osrfoundation.org/gazebo.gpg --output /usr/share/keyrings/pkgs-osrf-archive-keyring.gpg\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/pkgs-osrf-archive-keyring.gpg] http://packages.osrfoundation.org/gazebo/ubuntu-stable $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/gazebo-stable.list &gt; /dev/null\nsudo apt-get update\nsudo apt-get install gz-harmonic\n</code></pre></p>","tags":["bp"]},{"location":"dev/Installing%20ROS%202%20and%20the%20micro-ROS%20build%20system/","title":"Installing ROS 2 and the micro ROS build system","text":"<p>https://micro.ros.org/docs/tutorials/core/first_application_linux/ - Do \"Installing ROS 2 and the micro-ROS build system\"     - Skip the docker run command, build it locally instead - Skip \"Creating a new firmware workspace\" - Skip \"Building the firmware\" - Do \"Creating the micro-ROS agent\" - Source your ROS workspace <pre><code>ROS_DISTRO=humble\n\n# Source the ROS 2 installation\nsource /opt/ros/$ROS_DISTRO/setup.bash\n\n# Create a workspace and download the micro-ROS tools\nmkdir microros_ws\ncd microros_ws\ngit clone -b $ROS_DISTRO https://github.com/micro-ROS/micro_ros_setup.git src/micro_ros_setup\n\n# Update dependencies using rosdep\nsudo apt update &amp;&amp; rosdep update\nrosdep install --from-paths src --ignore-src -y\n\n# Install pip\nsudo apt-get install python3-pip\n\n# Build micro-ROS tools and source them\ncolcon build\nsource install/local_setup.bash\n</code></pre></p>","tags":["bp"]},{"location":"dev/Installing%20ROS%202%20and%20the%20micro-ROS%20build%20system/#creating-a-new-firmware-workspace","title":"Creating a new firmware workspace","text":"<pre><code>ros2 run micro_ros_setup create_firmware_ws.sh host\n</code></pre>","tags":["bp"]},{"location":"dev/Installing%20ROS%202%20and%20the%20micro-ROS%20build%20system/#build-the-firmware","title":"Build the firmware","text":"<pre><code>ros2 run micro_ros_setup build_firmware.sh\nsource install/local_setup.bash\n</code></pre>","tags":["bp"]},{"location":"dev/Installing%20ROS%202%20and%20the%20micro-ROS%20build%20system/#creating-the-micro-ros-agent","title":"Creating the micro-ROS agent","text":"<pre><code># Download micro-ROS-Agent packages\nros2 run micro_ros_setup create_agent_ws.sh\n</code></pre> <p>Now, let\u2019s build the agent packages and, when this is done, source the installation: <pre><code># Build step\nros2 run micro_ros_setup build_agent.sh\nsource install/local_setup.bash\n</code></pre></p>","tags":["bp"]},{"location":"dev/Installing%20ROS%202%20and%20the%20micro-ROS%20build%20system/#running-the-micro-ros-app","title":"Running the micro-ROS app","text":"<p><pre><code># Run a micro-ROS agent\nros2 run micro_ros_agent micro_ros_agent udp4 --port 8888\n</code></pre> Run micro-ROS node: <pre><code>source /opt/ros/$ROS_DISTRO/setup.bash\nsource install/local_setup.bash\n\n# Use RMW Micro XRCE-DDS implementation\nexport RMW_IMPLEMENTATION=rmw_microxrcedds\n\n# Run a micro-ROS node\nros2 run micro_ros_demos_rclc ping_pong\n</code></pre></p>","tags":["bp"]},{"location":"dev/ROS2%20Humble%20installation/","title":"ROS2 Humble installation","text":"<p>https://docs.ros.org/en/humble/Installation/Ubuntu-Install-Debs.html <pre><code># Set locale\nlocale  # check for UTF-8\n\nsudo apt update &amp;&amp; sudo apt install locales\nsudo locale-gen en_US en_US.UTF-8\nsudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8\nexport LANG=en_US.UTF-8\n\nlocale  # verify settings\n\n# Add universe repository\nsudo apt install software-properties-common\nsudo add-apt-repository universe\n\n# Add ROS2 GPG key\nsudo apt update &amp;&amp; sudo apt install curl -y\nsudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg\n\n# Add the ROS2 repository\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release &amp;&amp; echo $UBUNTU_CODENAME) main\" | sudo tee /etc/apt/sources.list.d/ros2.list &gt; /dev/null\n\n# Install ROS2 packages\nsudo apt update\n\n# Install ROS, RViz, demos, tutorials\nsudo apt install ros-humble-desktop\n\n# Development tools\nsudo apt install ros-dev-tools\n\n# Source the setup script\nsource /opt/ros/humble/setup.bash\n</code></pre></p>","tags":["bp"]},{"location":"dev/Read%20drone%20camera%20feed%20in%20python/","title":"Read drone camera feed in python","text":"<pre><code>pip install opencv-python\npip install numpy\npip install dronekit\npip install pymavlink\n</code></pre> <pre><code>sudo apt-get update\nsudo apt-get install libgstreamer1.0-0 gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-libav gstreamer1.0-doc gstreamer1.0-tools gstreamer1.0-x gstreamer1.0-alsa gstreamer1.0-gl gstreamer1.0-gtk3 gstreamer1.0-qt5 gstreamer1.0-pulseaudio\n</code></pre> <p>[!warning] It turns out that Gazebo uses some internal transport protocol (I believe similar to ROS), so conventional libraries to read the camera feed don't work. I decided to go via the path of least resistance and use ROS2 with Gazebo and Ardupilot.</p>","tags":["bp"]},{"location":"dev/Read%20drone%20camera%20feed%20in%20python/#setup-process","title":"Setup process","text":"<p>Setup ArduPilot + Gazebo + ROS2</p>","tags":["bp"]},{"location":"dev/Read%20drone%20camera%20feed%20in%20python/#configuration-architecture","title":"Configuration Architecture","text":"<pre>3bc9c2d6d318d27aa7d39c9995f04f6319903886ccd2fa485e7b416290828c4dcdd23025762f61ecb8841a4aa37d8c7fd7fa2598778cf312c650ea0932c66619</pre><pre>80704d3878a798161a52dc3800381363477bec968b9aaf97d4966b3868c796e301863e448ea26647e832b3591e71a731488abe2572d284fc0b50d364bcdb0a87</pre>","tags":["bp"]},{"location":"dev/Read%20drone%20camera%20feed%20in%20python/#following-the-official-ros2-ardupilot-gazebo-tutorial","title":"Following the official ROS2 + ArduPilot + Gazebo tutorial","text":"","tags":["bp"]},{"location":"dev/Run%20DroneKit%20to%20control%20ArduPilot%20STIL/","title":"Run DroneKit to control ArduPilot STIL","text":"<p>https://github.com/dronekit/dronekit-python.git 1. DroneKit installation 2. To ensure no problems, use python version <code>3.9</code> using <code>pyenv local 3.9</code></p>","tags":["bp"]},{"location":"dev/Run%20Gazebo%20%2B%20ArduPilot%20STIL%20with%20a%20camera%20feed/","title":"Run Gazebo + ArduPilot STIL with a camera feed","text":"<p>  Now for landing on an aruco marker, a camera on the drone is obviously a need. Let's setup ardupilot and gazebo with a camera  And we have video! But let's point the gimbal down by default: Change this line in the file <code>~/ardupilot_gazebo/models/iris_with_gimbal</code>: <pre><code>&lt;pose degrees=\"true\"&gt;0 -0.01 -0.124923 90 -90 90&lt;/pose&gt;\n</code></pre> Or point the gimball camera down with: <pre><code>rc 6 1500 # roll\nrc 7 1300 # pitch\n</code></pre> </p>","tags":["bp"]},{"location":"dev/Run%20Gazebo%20%2B%20ArduPilot%20STIL%20with%20a%20camera%20feed/#run-commands","title":"Run commands","text":"<p>Run Gazebo <pre><code>gz sim -v4 -r iris_runway.sdf\n</code></pre></p> <p>Run ArduPilot SITL with a specified parameter file <pre><code>cd ardupilot\n\nsim_vehicle.py -D -v ArduCopter -f JSON --add-param-file=$HOME/ardupilot_gazebo/config/gazebo-iris-gimbal.parm --console --map\n</code></pre></p>","tags":["bp"]},{"location":"dev/Run%20Gazebo%20%2B%20ArduPilot%20STIL%20with%20a%20camera%20feed/#start-camera-feed","title":"Start camera feed","text":"<p>The\u00a0<code>gimbal.sdf</code>\u00a0world includes a 3 degrees of freedom gimbal with a zoomable camera. To start streaming: <pre><code>gz topic -t /world/gimbal/model/mount/model/gimbal/link/pitch_link/sensor/camera/image/enable_streaming -m gz.msgs.Boolean -p \"data: 1\"\n</code></pre></p> <p>Display the streamed video: <pre><code>gst-launch-1.0 -v udpsrc port=5600 caps='application/x-rtp, media=(string)video, clock-rate=(int)90000, encoding-name=(string)H264' ! rtph264depay ! avdec_h264 ! videoconvert ! autovideosink sync=false\n</code></pre></p>","tags":["bp"]},{"location":"dev/Setup%20ArduPilot%20%2B%20Gazebo%20%2B%20ROS2/","title":"Setup ArduPilot + Gazebo + ROS2","text":"<p>Let's go through the setup process to ensure you have all the necessary packages: 0. Create a ROS2 workspace: <pre><code>source /opt/ros/humble/setup.bash\nmkdir -p ~/ros2_ws/src\ncd ~/ros2_ws/src\n</code></pre> 2. First, make sure you're in your ROS2 workspace: <pre><code>cd ~/ros2_ws\n</code></pre> 2. Clone the required repositories: <pre><code>cd src\ngit clone https://github.com/ArduPilot/ardupilot_gazebo.git\ngit clone https://github.com/ArduPilot/ardupilot_gz.git\ncd ..\n</code></pre> 3. Install dependencies <pre><code>sudo apt update\nrosdep update\nrosdep install --from-paths src --ignore-src -r -y\n</code></pre> 4. Build the workspace <pre><code>colcon build --symlink-install\n</code></pre> 5. Source the workspace <pre><code>source /opt/ros/humble/setup.bash\nsource ~/ros2_ws/install/setup.bash\nexport GZ_VERSION=harmonic  # or garden, depending on your Gazebo version\n</code></pre> 6. Run the launch file <pre><code>ros2 launch ardupilot_gz_bringup iris_runway.launch.py\n</code></pre> Run the Gazebo -&gt; ROS2 bridge on the camera topic <pre><code>source /opt/ros/humble/setup.bash\nros2 run ros_gz_bridge parameter_bridge /world/map/model/iris/model/gimbal/link/pitch_link/sensor/camera/image@sensor_msgs/msg/Image[ignition.msgs.Image\n</code></pre> Check if the topic is present <pre><code>ros2 topic list\n</code></pre></p> <p>Should return <code>/world/map/model/iris/model/gimbal/link/pitch_link/sensor/camera/image</code> </p> <p>Run <code>rqt</code> and watch the drone camera feed.</p> <p>[!warning] Make sure all terminals are sourced with step no. 5</p> <p>This should be the result: </p>","tags":["bp"]},{"location":"dev/Setup%20ArduPilot%20%2B%20Gazebo%20%2B%20ROS2/#pokus","title":"Pokus","text":"<p>https://gazebosim.org/docs/latest/ros_installation/#installing-the-default-gazebo-ros-pairing </p>","tags":["bp"]},{"location":"dev/Setup%20ArduPilot%20%2B%20Gazebo%20%2B%20ROS2/#installing-the-default-gazeboros-pairing","title":"Installing the Default Gazebo/ROS Pairing","text":"<pre><code>sudo apt-get install ros-${ROS_DISTRO}-ros-gz\n</code></pre>","tags":["bp"]},{"location":"dev/Setup%20ArduPilot%20%2B%20Gazebo%20%2B%20ROS2/#launch-gazebo-from-ros-2","title":"Launch Gazebo from ROS 2","text":"<pre><code>ros2 launch ros_gz_sim gz_sim.launch.py gz_args:=empty.sdf\n</code></pre> <p>[!info] Let's install ROS2 Jammy, since that has the best support for GZ Harmonic https://docs.ros.org/en/jazzy/Installation/Ubuntu-Install-Debs.html</p> <p> nevermind ...</p> <p>Let's try setting it all up</p>","tags":["bp"]},{"location":"dev/Setup%20ArduPilot%20%2B%20Gazebo%20%2B%20ROS2/#install-mavros-for-ros-2","title":"Install MAVROS for ROS 2","text":"<pre><code>sudo apt install ros-humble-mavros ros-humble-mavros-extras\n</code></pre>","tags":["bp"]},{"location":"dev/Setup%20ArduPilot%20%2B%20Gazebo%20%2B%20ROS2/#install-gazebo-ignition-fortress","title":"Install Gazebo (Ignition) Fortress","text":"<pre><code>sudo apt-get update\nsudo apt-get install lsb-release gnupg\n\nsudo curl https://packages.osrfoundation.org/gazebo.gpg --output /usr/share/keyrings/pkgs-osrf-archive-keyring.gpg\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/pkgs-osrf-archive-keyring.gpg] http://packages.osrfoundation.org/gazebo/ubuntu-stable $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/gazebo-stable.list &gt; /dev/null\nsudo apt-get update\nsudo apt-get install ignition-fortress\n</code></pre>","tags":["bp"]},{"location":"dev/Setup%20ArduPilot%20%2B%20Gazebo%20%2B%20ROS2/#install-gz_ros2_control","title":"Install <code>gz_ros2_control</code>","text":"<p>https://github.com/ros-controls/gz_ros2_control <pre><code>sudo apt install ros-humble-ign-ros2-control\n</code></pre></p>","tags":["bp"]},{"location":"dev/Setup%20ArduPilot%20%2B%20Gazebo%20%2B%20ROS2/#install-ardupilot_gazbeo-plugin","title":"Install <code>ardupilot_gazbeo</code> plugin","text":"<p>https://github.com/ArduPilot/ardupilot_gazebo </p>","tags":["bp"]},{"location":"dev/Setup%20ROS2%20environment%20and%20micro-ROS/","title":"Setup ROS2 environment and micro ROS","text":"<p>https://github.com/ArduPilot/ardupilot/tree/master/libraries/AP_DDS#installing-build-dependencies https://ardupilot.org/dev/docs/ros2.html#installation-ubuntu <pre><code># Clone the repository\nmkdir -p ~/ardu_ws/src\ncd ~/ardu_ws\nvcs import --recursive --input  https://raw.githubusercontent.com/ArduPilot/ardupilot/master/Tools/ros2/ros2.repos src\n\n# Install the dependencies\ncd ~/ardu_ws\nsudo apt update\nrosdep update\nsource /opt/ros/humble/setup.bash\nrosdep install --from-paths src --ignore-src\n\n# Installing the\u00a0MicroXRCEDDSGen\u00a0build dependency\nsudo apt install default-jre\ncd ~/ardu_ws\ngit clone --recurse-submodules https://github.com/ardupilot/Micro-XRCE-DDS-Gen.git\ncd Micro-XRCE-DDS-Gen\n./gradlew assemble\necho \"export PATH=\\$PATH:$PWD/scripts\" &gt;&gt; ~/.bashrc\n\n# Build the workspace\ncd ~/ardu_ws\ncolcon build --packages-up-to ardupilot_dds_tests\n</code></pre></p>","tags":["bp"]},{"location":"dev/Setup%20ROS2%20environment%20and%20micro-ROS/#setup-dds","title":"Setup DDS","text":"<pre><code># Dependencies for a virtual serial port\nsudo apt-get update\nsudo apt-get install socat\n\n# Install geographic_msgs\nsudo apt install ros-humble-geographic-msgs\n</code></pre> <p>Installing ROS 2 and the micro-ROS build system</p>","tags":["bp"]},{"location":"dev/Using%20SITL%20with%20gazebo/","title":"Using SITL with gazebo","text":"<p>https://ardupilot.org/dev/docs/sitl-with-gazebo.html - [x] install Gazebo (Harmonix)</p> <p>Install ArduPilot Gazebo plugin <pre><code>sudo apt update\nsudo apt install libgz-sim8-dev rapidjson-dev\nsudo apt install libopencv-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev gstreamer1.0-plugins-bad gstreamer1.0-libav gstreamer1.0-gl\n</code></pre></p> <p>Create a workspace folder and clone the repository <pre><code>mkdir -p gz_ws/src &amp;&amp; cd gz_ws/src\ngit clone https://github.com/ArduPilot/ardupilot_gazebo\n</code></pre></p> <p>Build the plugin <pre><code>export GZ_VERSION=harmonic\ncd ardupilot_gazebo\nmkdir build &amp;&amp; cd build\ncmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo\nmake -j4\n</code></pre></p> <p>Configure the Gazebo environment <pre><code>echo 'export GZ_SIM_SYSTEM_PLUGIN_PATH=$HOME/gz_ws/src/ardupilot_gazebo/build:${GZ_SIM_SYSTEM_PLUGIN_PATH}' &gt;&gt; ~/.bashrc\necho 'export GZ_SIM_RESOURCE_PATH=$HOME/gz_ws/src/ardupilot_gazebo/models:$HOME/gz_ws/src/ardupilot_gazebo/worlds:${GZ_SIM_RESOURCE_PATH}' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre></p>","tags":["bp"]},{"location":"dev/ardupilot_gz%20installation/","title":"Ardupilot gz installation","text":"<p>https://github.com/ArduPilot/ardupilot_gz?tab=readme-ov-file</p>","tags":["bp"]},{"location":"dev/ardupilot_gz%20installation/#install","title":"Install","text":"","tags":["bp"]},{"location":"dev/ardupilot_gz%20installation/#1-create-a-workspace-folder","title":"1. Create a workspace folder","text":"<pre><code>mkdir -p ~/ros2_ws/src\n</code></pre>","tags":["bp"]},{"location":"dev/ardupilot_gz%20installation/#2-get-the-project-source","title":"2. Get the project source","text":"<pre><code>cd ~/ros2_ws\nvcs import --input https://raw.githubusercontent.com/ArduPilot/ardupilot_gz/main/ros2_gz.repos --recursive src\n</code></pre>","tags":["bp"]},{"location":"dev/ardupilot_gz%20installation/#3-set-the-gazebo-version-to-harmonic-or-garden","title":"3. Set the Gazebo version to Harmonic or Garden:","text":"<p>It is recommended to put this in your\u00a0<code>~/.bashrc</code>\u00a0or equivalent file. <pre><code>export GZ_VERSION=harmonic\n</code></pre></p>","tags":["bp"]},{"location":"dev/ardupilot_gz%20installation/#4-update-ros-dependencies","title":"4. Update ROS dependencies","text":"<pre><code>cd ~/ros2_ws\nsource /opt/ros/humble/setup.bash\nsudo apt update\nrosdep update\nrosdep install --from-paths src --ignore-src -y\n</code></pre>","tags":["bp"]},{"location":"dev/ardupilot_gz%20installation/#5-build","title":"5. Build","text":"<pre><code>cd ~/ros2_ws\ncolcon build\n</code></pre>","tags":["bp"]},{"location":"dev/ardupilot_gz%20installation/#6-test","title":"6. Test","text":"<pre><code>source ./install/setup.bash\ncolcon test --packages-select ardupilot_sitl ardupilot_dds_tests ardupilot_gazebo ardupilot_gz_applications ardupilot_gz_description ardupilot_gz_gazebo ardupilot_gz_bringup\ncolcon test-result --all --verbose\n</code></pre>","tags":["bp"]}]}